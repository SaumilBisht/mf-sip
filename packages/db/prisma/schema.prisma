generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                 String   @id @default(cuid())
  fullName           String
  email              String   @unique
  phone              String   @unique
  encryptedPan       String
  encryptedBankAcc   String?
  encryptedIfsc      String?
  nomineeName        String?
  nomineeRelation    String?
  kycStatus          KycStatus @default(PENDING)
  ckycRefId          String?
  digilockerToken    String?   // only ref, not file
  fatcaDeclaration   Json?
  languagePref       String?   // "en" or "hi"
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  sips               SIP[]
  investments        Investment[]
  payments           Payment[]
  documents          Document[]
}

model SIP {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  fundName         String
  amcCode          String
  schemeCode       String
  amountPerInstallment Float
  totalInstallments Int
  frequency        SIPFrequency
  startDate        DateTime
  nextInstallment  DateTime?
  endDate          DateTime?
  status           SIPStatus @default(ACTIVE)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  investments      Investment[]
}

model Investment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  sipId           String?  // null for one-time lump sum
  sip             SIP?     @relation(fields: [sipId], references: [id])
  fundName        String
  amcCode         String
  schemeCode      String
  units           Float
  navAtPurchase   Float
  currentNav      Float?
  type            InvestmentType // SIP or Lumpsum
  status          InvestmentStatus
  purchaseDate    DateTime
  createdAt       DateTime @default(now())

  Payment Payment[]
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  investmentId    String?
  investment      Investment? @relation(fields: [investmentId], references: [id])
  txnRef          String
  amount          Float
  mode            PaymentMode
  razorpayOrderId String?
  upiRefId        String?
  status          PaymentStatus
  createdAt       DateTime @default(now())
}

model Document {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  docType     String   // "PAN", "BankProof", "NomineeForm"
  s3Url       String
  uploadedAt  DateTime @default(now())
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum InvestmentType {
  SIP
  LUMPSUM
}

enum SIPFrequency {
  MONTHLY
  QUARTERLY
  WEEKLY
}

enum SIPStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  SUCCESS
  FAILED
}

enum PaymentMode {
  UPI
  NETBANKING
  AUTO_DEBIT
}

enum InvestmentStatus {
  PENDING
  SUCCESS
  FAILED
  REDEEMED
  CANCELLED
  ONGOING
}
