generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id               String     @id @default(cuid())
  fullName         String
  email            String     @unique
  currentStep      Int        @default(1)
  phone            String?    @unique
  encryptedPan     String?
  encryptedBankAcc String?
  encryptedIfsc    String?
  upiId            String?      // UPI ID (if provided)
  dob              DateTime?    // Date of Birth
  maritalStatus    String?      // e.g. "Single", "Married"
  education        String?      // Highest education level
  motherName       String?
  fatherName       String?
  income           Float?       // Annual income (optional)
  sourceOfIncome   String?      // e.g. "Salary", "Business"
  countryOfBirth   String?      // Country of birth
  nationality      String?      // Nationality
  taxResidency     Json?        // FATCA/CRS declaration (could store list of countries)
  nomineeName      String?
  nomineeRelation  String?
  kycStatus        KycStatus   @default(PENDING)
  ckycRefId        String?      // CKYC reference after PAN verification
  digilockerToken  String?      // e.g. DigiLocker access token or reference
  fatcaDeclaration Json?        // e.g. JSON of FATCA form answers
  languagePref     String?      // "en" or "hi"
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  // Relations
  sips             SIP[]
  investments      Investment[]
  payments         Payment[]
  documents        Document[]
}

model SIP {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  fundName         String
  amcCode          String
  schemeCode       String
  amountPerInstallment Float
  totalInstallments Int
  frequency        SIPFrequency
  startDate        DateTime
  nextInstallment  DateTime?
  endDate          DateTime?
  status           SIPStatus @default(ACTIVE)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  investments      Investment[]
}

model Investment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  sipId           String?  // null for one-time lump sum
  sip             SIP?     @relation(fields: [sipId], references: [id])
  fundName        String
  amcCode         String
  schemeCode      String
  units           Float
  navAtPurchase   Float
  currentNav      Float?
  type            InvestmentType // SIP or Lumpsum
  status          InvestmentStatus
  purchaseDate    DateTime
  createdAt       DateTime @default(now())

  Payment Payment[]
}

model Payment {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  investmentId    String?
  investment      Investment? @relation(fields: [investmentId], references: [id])
  txnRef          String
  amount          Float
  mode            PaymentMode
  razorpayOrderId String?
  upiRefId        String?
  status          PaymentStatus
  createdAt       DateTime @default(now())
}

model Document {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  docType     String   // "PAN", "BankProof", "NomineeForm"
  s3Url       String
  //SIGNATURE FILE OR SOMETHING
  uploadedAt  DateTime @default(now())
}

enum KycStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum InvestmentType {
  SIP
  LUMPSUM
}

enum SIPFrequency {
  MONTHLY
  QUARTERLY
  WEEKLY
}

enum SIPStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  INITIATED
  SUCCESS
  FAILED
}

enum PaymentMode {
  UPI
  NETBANKING
  AUTO_DEBIT
}

enum InvestmentStatus {
  PENDING
  SUCCESS
  FAILED
  REDEEMED
  CANCELLED
  ONGOING
}
